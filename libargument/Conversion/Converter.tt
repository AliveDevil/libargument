<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\GenericTypes.t4" #>
<#@ output extension=".generated.cs" #>
using System;

namespace libargument.Conversion
{
<#
foreach (var type in Types())
{
	if (GenerateClass(type))
	{
#>
	/// <summary>
	/// Converts a string from and to <#= type #>.
	/// </summary>
	public sealed class <#= type #>Converter : ITypeConverter<<#= type #>>
	{
		private IController target;

		/// <summary>
		///  Default constructor providing access to an IController instance.
		/// </summary>
		/// <param name="target"></param>
		public <#= type #>Converter(IController target)
		{
			this.target = target;
		}

		/// <summary>
		/// Determines if a value can be read by current converter.
		/// </summary>
		/// <param name="value"></param>
		/// <returns>If this value can be converted to <#= type #>.</returns>
		public bool CanRead(string value)
		{
			<#= type #> o;
			return <#= type #>.TryParse(value, out o);
		}

		/// <summary>
		/// Tries to convert specified value to <#= type #> or returns null in case of failure.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		object ITypeConverter.Read(string value)
		{
			<#= type #> o;
			return <#= type #>.TryParse(value, out o) ? (Object)o : null;
		}

		/// <summary>
		/// Tries to convert specified value to <#= type #> or throws an exception.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public <#= type #> Read(string value)
		{
			return <#= type #>.Parse(value);
		}

		/// <summary>
		/// Unused.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public string Write(<#= type #> value)
		{
			return value.ToString();
		}

		/// <summary>
		/// Unused.
		/// </summary>
		/// <param name="value"></param>
		/// <returns></returns>
		public string Write(object value)
		{
			if (value is <#= type #>)
				return value.ToString();
			throw new ArgumentException("value is no <#= type #>.");
		}
	}
<#
	}
}
#>
}
