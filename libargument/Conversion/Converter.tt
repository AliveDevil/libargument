<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
using System;

namespace libargument.Conversion
{
<#
	var types = new Type[]
	{
		typeof(Int16),
		typeof(Int32),
		typeof(Int64),
		typeof(UInt16),
		typeof(UInt32),
		typeof(UInt64),
		typeof(Single),
		typeof(Double),
		typeof(DateTime),
		typeof(TimeSpan)
	};
	foreach (var type in types)
	{
		#>

		public sealed class <#= type.Name #>Converter : ITypeConverter<<#= type.Name #>>
		{
			object ITypeConverter.Read(string value)
			{
				<#= type.Name #> o;
				return <#= type.Name #>.TryParse(value, out o) ? o : null;
			}

			public <#= type.Name #> Read(string value)
			{
				return <#= type.Name #>.Parse(value);
			}

			public string Write(<#= type.Name #> value)
			{
				return value.ToString();
			}

			public string Write(object value)
			{
				if (value is <#= type.Name #>)
					return value.ToString();
				throw new ArgumentException("value is no <#= type.Name #>.");
			}
		}
		<#
	}
#>

}
